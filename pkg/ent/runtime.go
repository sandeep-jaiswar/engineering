// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/sandeep-jaiswar/engineering/pkg/ent/permission"
	"github.com/sandeep-jaiswar/engineering/pkg/ent/policies"
	"github.com/sandeep-jaiswar/engineering/pkg/ent/role"
	"github.com/sandeep-jaiswar/engineering/pkg/ent/schema"
	"github.com/sandeep-jaiswar/engineering/pkg/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	permissionFields := schema.Permission{}.Fields()
	_ = permissionFields
	// permissionDescCreatedAt is the schema descriptor for created_at field.
	permissionDescCreatedAt := permissionFields[2].Descriptor()
	// permission.DefaultCreatedAt holds the default value on creation for the created_at field.
	permission.DefaultCreatedAt = permissionDescCreatedAt.Default.(time.Time)
	// permissionDescUpdatedAt is the schema descriptor for updated_at field.
	permissionDescUpdatedAt := permissionFields[3].Descriptor()
	// permission.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	permission.DefaultUpdatedAt = permissionDescUpdatedAt.Default.(time.Time)
	// permission.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	permission.UpdateDefaultUpdatedAt = permissionDescUpdatedAt.UpdateDefault.(func() time.Time)
	policiesFields := schema.Policies{}.Fields()
	_ = policiesFields
	// policiesDescCreatedAt is the schema descriptor for created_at field.
	policiesDescCreatedAt := policiesFields[2].Descriptor()
	// policies.DefaultCreatedAt holds the default value on creation for the created_at field.
	policies.DefaultCreatedAt = policiesDescCreatedAt.Default.(time.Time)
	// policiesDescUpdatedAt is the schema descriptor for updated_at field.
	policiesDescUpdatedAt := policiesFields[3].Descriptor()
	// policies.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	policies.DefaultUpdatedAt = policiesDescUpdatedAt.Default.(time.Time)
	// policies.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	policies.UpdateDefaultUpdatedAt = policiesDescUpdatedAt.UpdateDefault.(func() time.Time)
	roleFields := schema.Role{}.Fields()
	_ = roleFields
	// roleDescCreatedAt is the schema descriptor for created_at field.
	roleDescCreatedAt := roleFields[2].Descriptor()
	// role.DefaultCreatedAt holds the default value on creation for the created_at field.
	role.DefaultCreatedAt = roleDescCreatedAt.Default.(time.Time)
	// roleDescUpdatedAt is the schema descriptor for updated_at field.
	roleDescUpdatedAt := roleFields[3].Descriptor()
	// role.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	role.DefaultUpdatedAt = roleDescUpdatedAt.Default.(time.Time)
	// role.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	role.UpdateDefaultUpdatedAt = roleDescUpdatedAt.UpdateDefault.(func() time.Time)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescStatus is the schema descriptor for status field.
	userDescStatus := userFields[3].Descriptor()
	// user.DefaultStatus holds the default value on creation for the status field.
	user.DefaultStatus = userDescStatus.Default.(string)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[4].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userFields[5].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
}
